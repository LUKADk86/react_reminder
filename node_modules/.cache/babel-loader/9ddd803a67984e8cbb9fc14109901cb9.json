{"ast":null,"code":"import { ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDERS } from '../types';\n\nconst reminders = (state = [], action) => {\n  let reminders = null;\n\n  if (action.type === ADD_REMINDER) {\n    reminders = [...state, {\n      text: action.text,\n      date: action.date,\n      time: action.time,\n      id: Math.random()\n    }];\n    console.log(\"from reducers ADD\", reminders);\n    return reminders;\n  } else if (action.type === REMOVE_REMINDER) {\n    reminders = state.filter(reminder => reminder.id !== action.id);\n    console.log(\"from reducers REMOVE\", reminders);\n    return reminders;\n  } else if (action.type === CLEAR_REMINDERS) {\n    reminders = [];\n    console.log(\"from reducers CLEAR\", reminders);\n    return reminders;\n  }\n\n  return state;\n};\n\nexport default reminders;","map":{"version":3,"sources":["/home/lounis/Bureau/redux/react-reminder/react_reminder/src/reducers/index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEAR_REMINDERS","reminders","state","action","type","text","date","time","id","Math","random","console","log","filter","reminder"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA6D,UAA7D;;AAGA,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAC,EAAP,EAAWC,MAAX,KAAoB;AAClC,MAAIF,SAAS,GAAC,IAAd;;AACA,MAAGE,MAAM,CAACC,IAAP,KAAcN,YAAjB,EAA8B;AAC1BG,IAAAA,SAAS,GAAC,CAAC,GAAGC,KAAJ,EAAU;AAACG,MAAAA,IAAI,EAACF,MAAM,CAACE,IAAb;AAAmBC,MAAAA,IAAI,EAACH,MAAM,CAACG,IAA/B;AAAoCC,MAAAA,IAAI,EAACJ,MAAM,CAACI,IAAhD;AAAsDC,MAAAA,EAAE,EAACC,IAAI,CAACC,MAAL;AAAzD,KAAV,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCX,SAAhC;AACA,WAAOA,SAAP;AACH,GAJD,MAIM,IAAGE,MAAM,CAACC,IAAP,KAAcL,eAAjB,EAAiC;AACnCE,IAAAA,SAAS,GAACC,KAAK,CAACW,MAAN,CAAaC,QAAQ,IAAEA,QAAQ,CAACN,EAAT,KAAcL,MAAM,CAACK,EAA5C,CAAV;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCX,SAAnC;AACA,WAAOA,SAAP;AACH,GAJK,MAIA,IAAGE,MAAM,CAACC,IAAP,KAAcJ,eAAjB,EAAiC;AACnCC,IAAAA,SAAS,GAAC,EAAV;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCX,SAAlC;AACA,WAAOA,SAAP;AACH;;AACD,SAAOC,KAAP;AACH,CAhBD;;AAsBA,eAAeD,SAAf","sourcesContent":["import {ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDERS} from '../types'\n\n\nconst reminders = (state=[], action)=>{\n    let reminders=null;\n    if(action.type===ADD_REMINDER){\n        reminders=[...state,{text:action.text, date:action.date,time:action.time, id:Math.random()}];\n        console.log(\"from reducers ADD\",reminders);\n        return reminders;\n    }else if(action.type===REMOVE_REMINDER){\n        reminders=state.filter(reminder=>reminder.id!==action.id)\n        console.log(\"from reducers REMOVE\",reminders);\n        return reminders;\n    }else if(action.type===CLEAR_REMINDERS){\n        reminders=[]\n        console.log(\"from reducers CLEAR\",reminders);\n        return reminders;\n    }\n    return state\n}\n \n\n\n\n\nexport default reminders;\n"]},"metadata":{},"sourceType":"module"}